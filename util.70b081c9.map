{"version":3,"sources":["assets\\js\\util.js"],"names":["$","each","$img","imgID","attr","imgClass","imgURL","get","data","$svg","find","removeAttr","replaceWith","getUserTopLang","user","requestData","userData","reposData","error","is","repo","fork","language","undefined","languages","findKey","index","push","sort","a","b","first","Object","values","second","length","keys","colors","topLangugage","color","chroma","primaryColor","darken","hex","avatar_url","name","login","avatarUrl","profileUrl","userPromise","axios","reposPromise","Promise","all","then","catch","err","response","status","handleError","Array","prototype","key","i","hasOwnProperty"],"mappings":"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","file":"util.70b081c9.map","sourceRoot":"..","sourcesContent":["// CONVERTS SVGS WHICH ARE IN IMG TAGS TO NORMAL SVGS\r\n$(function () {\r\n    $('img.svg').each(function () {\r\n        let $img = $(this);\r\n        let imgID = $img.attr('id');\r\n        let imgClass = $img.attr('class');\r\n        let imgURL = $img.attr('src');\r\n        $.get(imgURL, function (data) {\r\n            let $svg = $(data).find('svg');\r\n            if (typeof imgID !== 'undefined') {\r\n                $svg = $svg.attr('id', imgID);\r\n            }\r\n            if (typeof imgClass !== 'undefined') {\r\n                $svg = $svg.attr('class', imgClass + ' replaced-svg');\r\n            }\r\n            $svg = $svg.removeAttr('xmlns:a');\r\n            $img.replaceWith($svg);\r\n        }, 'xml');\r\n    });\r\n})\r\n\r\nconst getUserTopLang = async (user) => {\r\n\r\n    const { userData, reposData, error } = await requestData(user);\r\n\r\n    // HANDLE ERROR IF THERE IS ANY\r\n    if (typeof error == 'number') {\r\n        handleError(error);\r\n        oldUser = user;\r\n        return;\r\n    }\r\n\r\n    // GETTING ALL USED LANGUAGES AMONG THE REPOS\r\n    for (const repo of reposData) {\r\n        if ($('#enable-forks').is(':checked') || repo.fork == false) {\r\n            let language = repo.language;\r\n            if (language === null) {\r\n                continue;\r\n            }\r\n            let index = languages.findKey(language);\r\n            if (index != undefined) {\r\n                languages[index][language]++;\r\n            } else {\r\n                languages.push({ [language]: 1 });\r\n            }\r\n        }\r\n    }\r\n\r\n    // SORTING THE LANGUAGE ARRAY BY DESCENDING ORDER\r\n    languages = languages.sort((a, b) => {\r\n        let first = Object.values(a);\r\n        let second = Object.values(b);\r\n        return second - first;\r\n    });\r\n\r\n    // FIRST ELEMENT IS THE MOST USED LANGUAGE\r\n    let topLangugage;\r\n    if (languages.length > 0) {\r\n        topLangugage = Object.keys(languages[0]);\r\n    } else {\r\n        handleError(404);\r\n        oldUser = user;\r\n        return;\r\n    }\r\n\r\n    // UPDATE DOM WITH THE APPROPRIATE DATA\r\n    if (colors[topLangugage].color != undefined || colors[topLangugage.color != null]) {\r\n        primaryColor = colors[topLangugage].color;\r\n        secondaryColor = chroma(primaryColor).darken(0.25).hex();\r\n    }\r\n\r\n    const avatarUrl = userData.avatar_url;\r\n    const profileUrl = `https://github.com/${user}`;\r\n    const name = userData.name ? userData.name : userData.login; // if available, display the user's real name, rather than the username\r\n    const favLang = `<a href=\"https://github.com/${user}\">${user}</a>'s favorite coding language is: <span id=\"language-span\">${topLangugage}</span>`;\r\n\r\n    updateDOM(avatarUrl, profileUrl, name, favLang);\r\n    oldUser = user;\r\n}\r\n\r\nconst requestData = (user) => {\r\n    const userPromise = axios.get(`https://api.github.com/users/${user}`);\r\n    const reposPromise = axios.get(`https://api.github.com/users/${user}/repos?type=all`);\r\n\r\n    return Promise.all([userPromise, reposPromise])\r\n        .then((data) => ({\r\n            userData: data[0].data,\r\n            reposData: data[1].data,\r\n        }))\r\n        .catch((err) => ({\r\n            error: err.response.status\r\n        }));\r\n};\r\n\r\nconst handleError = (error) => {\r\n    updateDOM(\r\n        `https://http.cat/${error}.jpg`,\r\n        `https://http.cat/${error}`,\r\n        `Oops! Error code ${error}`,\r\n        `Maybe try again? :c`\r\n    );\r\n}\r\n\r\nArray.prototype.findKey = function (key) {\r\n    for (let i = 0; i < this.length; i++) {\r\n        if (this[i].hasOwnProperty(key)) {\r\n            return i;\r\n        }\r\n    }\r\n    return undefined;\r\n};\r\n\r\n"]}